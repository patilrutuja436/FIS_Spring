package com.fis.springsecurity;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController 
@RequestMapping("/users")
public class MainController {
	@Autowired
	UserRepository userRepository;

	@GetMapping
	public Iterable<User> getAllUsers() {
		return userRepository.findAll();
	}

	@PostMapping
	public String addUser(@RequestBody User user) {
		userRepository.save(user);
		return "Saved";
	}

	@PutMapping
	public String updateUser(@RequestBody User user) {
		Optional<User> p = userRepository.findById(user.getId());
		if (p.isPresent()) {
			userRepository.save(user);
			return "Updated";
		} else {
			return "User Not Found!!";
		}
	}

	@DeleteMapping
	public String deleteUser(@RequestParam int id) {
		Optional<User> p = userRepository.findById(id);
		if (p.isPresent()) {
			userRepository.delete(p.get());
			return "Deleted";
		} else {
			return "User Not Found!!";
		}
	}

	@GetMapping("/{id}")
	public Object getAProduct(@PathVariable int id) {
		Optional<User> p = userRepository.findById(id);
		if (p.isPresent()) {
			return p.get();
		} else {
			return "User Not Found!!";
		}
	}
}









/*
 * @Controller // This means that this class is a Controller
 * 
 * @RequestMapping(path="/demo") // This means URL's start with /demo (after
 * Application path) public class MainController {
 * 
 * @Autowired // This means to get the bean called userRepository // Which is
 * auto-generated by Spring, we will use it to handle the data private
 * UserRepository userRepository;
 * 
 * @PostMapping(path="/add") // Map ONLY POST Requests public @ResponseBody
 * String addNewUser (@RequestParam String name , @RequestParam String email) {
 * // @ResponseBody means the returned String is the response, not a view name
 * // @RequestParam means it is a parameter from the GET or POST request
 * 
 * User n = new User(); n.setName(name); n.setEmail(email);
 * userRepository.save(n); return "Saved"; }
 * 
 * @GetMapping(path="/all") public @ResponseBody Iterable<User> getAllUsers() {
 * // This returns a JSON or XML with the users return userRepository.findAll();
 * } }
 */